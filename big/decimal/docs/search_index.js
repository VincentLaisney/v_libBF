var searchModuleIndex = ["libbf.big.decimal",];
var searchIndex = ["Bigdecimal","free","clone","neg","is_finite","is_nan","is_zero","+","add","-","sub","add_i64_ctx","add_i64","inc","dec","*","mul_i64_ctx","mul_i64","/","rem_ctx","%","rint","rint_ctx","str_ctx","str","int","Round","Context","free","MathContext","get_def_math_ctx","get_bf_retval","context_init","context_end","clear_cache","bf_free","new","delete","from_u64","from_i64","set_nan","set_zero","set_inf","set","cmp","div_ctx","divrem","divrem_ctx","round_ctx","round","sqrt","sqrt_ctx","PrintContext","get_def_print_ctx","AtofContext","get_def_atof_ctx","from_str_ctx","from_str","pow_u64",];
var searchModuleData = [["","libbf.big.decimal.html"],];
var searchData = [["libbf.big.decimal","","libbf.big.decimal.html#Bigdecimal","type "],["libbf.big.decimal","","libbf.big.decimal.html#Bigdecimal.free","fn (Bigdecimal)"],["libbf.big.decimal","","libbf.big.decimal.html#Bigdecimal.clone","fn (Bigdecimal)"],["libbf.big.decimal"," fn C.bf_neg(r &C.bf_t) ","libbf.big.decimal.html#Bigdecimal.neg","fn (Bigdecimal)"],["libbf.big.decimal"," fn C.bf_is_finite(a &C.bf_t) int ","libbf.big.decimal.html#Bigdecimal.is_finite","fn (Bigdecimal)"],["libbf.big.decimal"," fn C.bf_is_nan(a &C.bf_t) int ","libbf.big.decimal.html#Bigdecimal.is_nan","fn (Bigdecimal)"],["libbf.big.decimal"," fn C.bf_is_zero(a &C.bf_t) int ","libbf.big.decimal.html#Bigdecimal.is_zero","fn (Bigdecimal)"],["libbf.big.decimal"," fn C.bf_cmp_eq(a &bf_t, b &bf_t) int  // {  //     return bf_cmp(a, b) == 0;  /","libbf.big.decimal.html#Bigdecimal.+","fn (Bigdecimal)"],["libbf.big.decimal","","libbf.big.decimal.html#Bigdecimal.add","fn (Bigdecimal)"],["libbf.big.decimal"," fn C.bf_sub(r &C.bf_t, a &C.bf_t, b &C.bf_t, prec u64, flags u32) int ","libbf.big.decimal.html#Bigdecimal.-","fn (Bigdecimal)"],["libbf.big.decimal","","libbf.big.decimal.html#Bigdecimal.sub","fn (Bigdecimal)"],["libbf.big.decimal"," fn C.bf_add_si(r &C.bf_t, a &C.bf_t, b1 i64, prec u64, flags u32) int ","libbf.big.decimal.html#Bigdecimal.add_i64_ctx","fn (Bigdecimal)"],["libbf.big.decimal","","libbf.big.decimal.html#Bigdecimal.add_i64","fn (Bigdecimal)"],["libbf.big.decimal","","libbf.big.decimal.html#Bigdecimal.inc","fn (Bigdecimal)"],["libbf.big.decimal","","libbf.big.decimal.html#Bigdecimal.dec","fn (Bigdecimal)"],["libbf.big.decimal"," fn C.bf_mul(r &C.bf_t, a &C.bf_t, b &C.bf_t, prec u64, flags u32) int ","libbf.big.decimal.html#Bigdecimal.*","fn (Bigdecimal)"],["libbf.big.decimal"," fn C.bf_mul_ui(r &C.bf_t, a &C.bf_t, b1 u64, prec u64, flags u32) int  pub fn m","libbf.big.decimal.html#Bigdecimal.mul_i64_ctx","fn (Bigdecimal)"],["libbf.big.decimal","","libbf.big.decimal.html#Bigdecimal.mul_i64","fn (Bigdecimal)"],["libbf.big.decimal"," fn C.bf_mul_2exp(r &C.bf_t, e i64, prec u64, flags u32) int  pub fn (mut r Bigd","libbf.big.decimal.html#Bigdecimal./","fn (Bigdecimal)"],["libbf.big.decimal"," pub fn (a Bigfloat) / (b Bigfloat) Bigfloat {      mut q := new()      mut ctx ","libbf.big.decimal.html#Bigdecimal.rem_ctx","fn (Bigdecimal)"],["libbf.big.decimal","","libbf.big.decimal.html#Bigdecimal.%","fn (Bigdecimal)"],["libbf.big.decimal"," fn C.bf_remquo(pq &i64, r &C.bf_t, a &C.bf_t, b &C.bf_t, prec u64, flags u32, r","libbf.big.decimal.html#Bigdecimal.rint","fn (Bigdecimal)"],["libbf.big.decimal","","libbf.big.decimal.html#Bigdecimal.rint_ctx","fn (Bigdecimal)"],["libbf.big.decimal","","libbf.big.decimal.html#Bigdecimal.str_ctx","fn (Bigdecimal)"],["libbf.big.decimal","","libbf.big.decimal.html#Bigdecimal.str","fn (Bigdecimal)"],["libbf.big.decimal","","libbf.big.decimal.html#Bigdecimal.int","fn (Bigdecimal)"],["libbf.big.decimal","","libbf.big.decimal.html#Round","enum "],["libbf.big.decimal","","libbf.big.decimal.html#Context","type "],["libbf.big.decimal","","libbf.big.decimal.html#Context.free","fn (Context)"],["libbf.big.decimal","","libbf.big.decimal.html#MathContext","struct "],["libbf.big.decimal","","libbf.big.decimal.html#get_def_math_ctx","fn "],["libbf.big.decimal","","libbf.big.decimal.html#get_bf_retval","fn "],["libbf.big.decimal","","libbf.big.decimal.html#context_init","fn "],["libbf.big.decimal","","libbf.big.decimal.html#context_end","fn "],["libbf.big.decimal","","libbf.big.decimal.html#clear_cache","fn "],["libbf.big.decimal","","libbf.big.decimal.html#bf_free","fn "],["libbf.big.decimal"," // {  //     /* must test ptr otherwise equivalent to malloc(0) */  //     if (","libbf.big.decimal.html#new","fn "],["libbf.big.decimal"," fn C.bf_delete(r &C.bf_t) ","libbf.big.decimal.html#delete","fn "],["libbf.big.decimal"," fn C.bf_memcpy(r &C.bf_t, a &C.bf_t)  // {  //     *r = *a;  // }  fn C.bf_set_","libbf.big.decimal.html#from_u64","fn "],["libbf.big.decimal"," fn C.bf_set_si(r &C.bf_t, a i64) int ","libbf.big.decimal.html#from_i64","fn "],["libbf.big.decimal"," fn C.bf_set_nan(r &C.bf_t) ","libbf.big.decimal.html#set_nan","fn "],["libbf.big.decimal"," fn C.bf_set_zero(r &C.bf_t, is_neg int) ","libbf.big.decimal.html#set_zero","fn "],["libbf.big.decimal"," fn C.bf_set_inf(r &C.bf_t, is_inf int) ","libbf.big.decimal.html#set_inf","fn "],["libbf.big.decimal"," fn C.bf_set(r &C.bf_t, a &C.bf_t) int ","libbf.big.decimal.html#set","fn "],["libbf.big.decimal"," fn C.bf_move(r &C.bf_t, a &C.bf_t)  fn C.bf_get_float64(a &C.bf_t, pres &f64, r","libbf.big.decimal.html#cmp","fn "],["libbf.big.decimal","","libbf.big.decimal.html#div_ctx","fn "],["libbf.big.decimal","","libbf.big.decimal.html#divrem","fn "],["libbf.big.decimal","","libbf.big.decimal.html#divrem_ctx","fn "],["libbf.big.decimal"," fn C.bf_round(r &C.bf_t, prec u64, flags u32) int ","libbf.big.decimal.html#round_ctx","fn "],["libbf.big.decimal","","libbf.big.decimal.html#round","fn "],["libbf.big.decimal"," fn C.bf_sqrtrem(r &C.bf_t, rem1 &C.bf_t, a &C.bf_t) int  pub fn sqrtrem(a Bigfl","libbf.big.decimal.html#sqrt","fn "],["libbf.big.decimal","","libbf.big.decimal.html#sqrt_ctx","fn "],["libbf.big.decimal","","libbf.big.decimal.html#PrintContext","struct "],["libbf.big.decimal","","libbf.big.decimal.html#get_def_print_ctx","fn "],["libbf.big.decimal","","libbf.big.decimal.html#AtofContext","struct "],["libbf.big.decimal","","libbf.big.decimal.html#get_def_atof_ctx","fn "],["libbf.big.decimal"," fn C.bf_atof(a &C.bf_t, str &char, pnext &&char, radix int, prec u64, flags u32","libbf.big.decimal.html#from_str_ctx","fn "],["libbf.big.decimal","","libbf.big.decimal.html#from_str","fn "],["libbf.big.decimal"," fn C.bf_get_int64(pres &i64, a &C.bf_t, flags int) int  pub fn (a Bigdecimal) i","libbf.big.decimal.html#pow_u64","fn "],];
